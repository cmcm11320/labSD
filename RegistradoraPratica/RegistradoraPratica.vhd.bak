library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

-- Biblioteca adicional para simulação de arquivos
use STD.TEXTIO.ALL;

-- Módulo principal 
entity RegistradoraPratica is
    Port (
        CLK          : in  STD_LOGIC;               -- Clock principal
        RESET        : in  STD_LOGIC;               -- Reset do sistema
		  keyboard_val : in  STD_LOGIC_VECTOR(3 downto 0);
		  operation    : in  STD_LOGIC_VECTOR(1 downto 0);
        SEG_DISPLAY1  : out STD_LOGIC_VECTOR(6 downto 0); -- Saída para display de 7 segmentos
		  SEG_DISPLAY2  : out STD_LOGIC_VECTOR(6 downto 0);
		  SEG_DISPLAY3  : out STD_LOGIC_VECTOR(6 downto 0);
		  SEG_DISPLAY4  : out STD_LOGIC_VECTOR(6 downto 0);
		  SEG_DISPLAYtotal1  : out STD_LOGIC_VECTOR(3 downto 0);
		  SEG_DISPLAYtotal2  : out STD_LOGIC_VECTOR(3 downto 0);
        TIMER : out STD_LOGIC_VECTOR(15 downto 0)  -- Hora atual em formato HHMM
    );
end RegistradoraPratica;

architecture Behavioral of RegistradoraPratica is

    -- Estados da máquina de estados
    type STATE_TYPE is (IDLE, PROCESS_INPUT, UPDATE_DISPLAY);
    signal CURRENT_STATE, NEXT_STATE : STATE_TYPE := IDLE;

    -- Sinais internos
    signal clock_divider : integer := 0;
    signal CLK_1HZ       : STD_LOGIC := '0';  -- Clock de 1 Hz para o relógio
	 
	 
	 signal reg_total     : integer := 0;
    signal reg_value     : STD_LOGIC_VECTOR(7 downto 0);      -- Valor total da caixa registradora
	 signal value_tens  : STD_LOGIC_VECTOR(3 downto 0);
	 signal value_ones  : STD_LOGIC_VECTOR(3 downto 0);


    signal current_timer  : integer := 1200;  -- Horário inicial 12:00
	 
	 signal sub_timer  : STD_LOGIC_VECTOR(15 downto 0);
	 signal hour_tens  : STD_LOGIC_VECTOR(3 downto 0); -- Dezena das horas
    signal hour_ones  : STD_LOGIC_VECTOR(3 downto 0); -- Unidade das horas
    signal minute_tens: STD_LOGIC_VECTOR(3 downto 0); -- Dezena dos minutos
    signal minute_ones: STD_LOGIC_VECTOR(3 downto 0); -- Unidade dos minutos

	 
	 component Bcd_7seg is
        port (
            entrada : in std_logic_vector(3 downto 0);
            saida   : out std_logic_vector(6 downto 0)
        );
    end component;
    

    -- Módulo: Divisor de Clock
begin
    process(CLK)
    begin
        if rising_edge(CLK) then
            if clock_divider = 50000000 then  -- Considerando um clock de 50 MHz
                clock_divider <= 0;
                CLK_1HZ <= not CLK_1HZ;
            else
                clock_divider <= clock_divider + 1;
            end if;
        end if;
    end process;

    -- Módulo: Atualização do Horário
    process(CLK_1HZ, RESET)
    begin
        if RESET = '1' then
            current_timer <= 1200;
        elsif rising_edge(CLK_1HZ) then
            if current_timer mod 100 = 59 then
                if current_timer / 100 = 23 then
                    current_timer <= 0;
                else
                    current_timer <= (current_timer / 100 + 1) * 100;
                end if;
            else
                current_timer <= current_timer + 1;
            end if;
        end if;
    end process;

    -- Módulo: Máquina de Estados
    process(CLK, RESET)
    begin
        if RESET = '1' then
            CURRENT_STATE <= IDLE;
        elsif rising_edge(CLK) then
            CURRENT_STATE <= NEXT_STATE;
        end if;
    end process;

    -- Módulo: Lógica de Processamento de Estados
    process(CURRENT_STATE, keyboard_val)
	 
    begin
        case CURRENT_STATE is
            when IDLE =>
                    NEXT_STATE <= PROCESS_INPUT;

            when PROCESS_INPUT =>
                -- Processa o valor e operação
					 valor := to_integer(unsigned(keyboard_val));
					 
                if operation = "01" then
                    reg_total <= reg_total + valor;
                elsif operation = "11" then
                    reg_total <= reg_total - valor;
                end if;
                NEXT_STATE <= UPDATE_DISPLAY;

            when UPDATE_DISPLAY =>
                NEXT_STATE <= IDLE;
				
            when others =>
                NEXT_STATE <= IDLE;
        end case;
		  
    end process;

    -- Módulo: Atualização das Saídas
    TIMER <= std_logic_vector(to_unsigned(current_timer, 16));
	 
	 sub_timer <= std_logic_vector(to_unsigned(current_timer, 16));
	 
	 reg_value <= std_logic_vector(to_unsigned(reg_total, 8)); -- Valor tota

	 hour_tens  <= sub_timer(15 downto 12); 
    hour_ones  <= sub_timer(11 downto 8);   
    minute_tens <= sub_timer(7 downto 4);   
    minute_ones <= sub_timer(3 downto 0);  
	 
	 value_tens <= sub_timer(7 downto 4);   
	 value_ones <= sub_timer(3 downto 0);  

	 
	 inst_Bcd7seg1: Bcd_7seg port map (entrada=>hour_tens, saida=>SEG_DISPLAY1);
	 inst_Bcd7seg2: Bcd_7seg port map (entrada=>hour_ones, saida=>SEG_DISPLAY2);
	 inst_Bcd7seg3: Bcd_7seg port map (entrada=>minute_tens, saida=>SEG_DISPLAY3);
	 inst_Bcd7seg4: Bcd_7seg port map (entrada=>minute_ones, saida=>SEG_DISPLAY4);
	 
	 inst_Bcd7segvalue1: Bcd_7seg port map (entrada=>value_tens, saida=>SEG_DISPLAYtotal1);
	 inst_Bcd7segvalue2: Bcd_7seg port map (entrada=>value_ones, saida=>SEG_DISPLAYtotal2);


end Behavioral;
